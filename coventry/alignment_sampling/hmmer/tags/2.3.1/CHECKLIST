Checklist for a HMMER distribution.

1. Make sure we're up to date w/ CVS. (Worry about commits here, on
   other machines and other dirs that may have squid modifications)
	% ./configure
        % make distclean
	% cvs update
	% cvs commit
   Clean up any stray files.

2. Test dev code before making release.
   This works anywhere (e.g. wren; don't have to be on wrasse)
   With and without memory leak tests ('make check' doesn't include -m flag)
   ccmalloc 0.3.9 is installed in /usr/local on wren and wrasse.
   Note: ccmalloc not threadsafe, so this doesn't test threads implementation.
   Note: glibc qsort() has a 6-byte "leak": tophits test will leak 6 bytes and fail.
    	% autoconf; (cd squid; autoconf)
     	% ./configure --enable-ccmalloc
        % make
	% (cd testsuite; ../ssdk/sqc -m -p ../squid 2 exercises.sqc . ../src)
	% (cd Bugs;      ../ssdk/sqc -m -p ../squid 2 bugs.sqc      . ../src)
	% make distclean
	% ./configure --enable-threads --enable-lfs --enable-pvm
	% make
	% make check
        % (cd Bugs;      ../ssdk/sqc -p ../squid 2 bugs.sqc      . ../src)
	% make optcheck

3. More manual testing.
     Test the pvm (wrasse):
        % cd testsuite
	% echo quit| pvm pvm.conf
	% ../src/hmmpfam --pvm Pfam_ls8.0 ../tutorial/7LES_DROME > foo.pvm
	% echo halt| pvm pvm.conf
     Test threads and nonthreads (whelk01): 
        % ../src/hmmpfam Pfam_ls8.0 ../tutorial/7LES_DROME > foo.pthread
        % ../src/hmmpfam --cpu 0 Pfam_ls8.0 ../tutorial/7LES_DROME > foo.normal
     Make sure that foo.* all work (7LES_DROME is big enough to exercise bug #h22)
     Check that foo.* all give identical E-values (bug #h20).
	
4. Write release notes.
   cvs2cl.pl creates ChangeLog; a useful summary of CVS logs
	% ssdk/cvs2cl.pl    
        % emacs Release-Notes/RELEASE-${RELEASE}
	% cvs add Release-Notes/RELEASE-${RELEASE}

5. Update copyright, year, relcode, etc:
        configure.ac
	Licenses/gnu   (year only)

6. Commit to CVS. Include package and release # in the log message.
	% cvs commit

7. Make a distro. 
   yes, you have to autoconf and make a new configure script; you
   just updated the info in configure.ac, remember?
	% make distclean
	% autoconf; (cd squid; autoconf); ./configure
	% make dist
	

8. Create the binary distributions, on w001, the compile farm master node.
   ssh -x w001.
   Make a directory somewhere, go there.
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/nodebuild .
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/rootbuild .
         ln -s /nfs/wol2/people/eddy/src/hmmer/ssdk/buildall .
         ln -s /nfs/wol2/people/eddy/src/hmmer/hmmer-2.3.tar.gz .
         ./buildall hmmer-2.3 >& build.log &
         tail -f build.log

    darwin (dual800) is done manually:
    ssh into dual800 in Warren's lab.
      scp eddy@wrasse.wustl.edu:src/hmmer/hmmer-2.3.tar.gz .
      scp eddy@wrasse.wustl.edu:src/hmmer/ssdk/nodebuild .
      ./nodebuild /Users/seddy hmmer-2.3  powerpc-apple-osx "--enable-threads --enable-lfs --enable-altivec" CFLAGS="-O" 
      scp hmmer-2.3.bin.powerpc-apple-osx.tar.gz eddy@wrasse.wustl.edu:
      scp hmmer-2.3.powerpc-apple-osx.log eddy@wrasse.wustl.edu:

      [cpu0/pkinase/50000 =  513.270u  w/o altivec]
      [cpu0/pkinase/50000 =  177.360u 2:58.04   w/  altivec]
      [cpu2/pkinase/50000 =  206.610u 1:44.90   w/  altivec]
      
    whippet is also done manually:
      ssh -x -vv whippet
      cd /scratch/eddy
      cp ~/src/hmmer/hmmer-2.3.tar.gz .
      cp ~/src/hmmer/ssdk/nodebuild .
      ./nodebuild /scratch/eddy hmmer-2.3  hp-hpux "--enable-threads" CFLAGS="-O"
      cp hmmer-2.3.bin.hp-hpux.tar.gz ~/
      cp hmmer-2.3.hp-hpux.log ~/

    Move all binary distros to the FTP site,
    /nfs/ftp/eddy/hmmer/(RELEASE)/

9.  Install all the files on the FTP site; change CURRENT symlink.
    (Check that FTPDIR is correct in Makefile).

      % make ftpdist
      % make stable

10. Update and install the web page, which is in ~/web/hmmer.

      % make install

11. Email hmmer@genetics.wustl.edu and make the announcement.

