dnl Process this file with autoconf to produce a configure script.
dnl SRE, Mon Oct  5 14:55:45 1998
dnl CVS $Id$
dnl 
dnl Hint: See autoconf macro archive at 
dnl     http://www.gnu.org/software/ac-archive/

AC_INIT(src/hmmpfam.c)

echo "   Welcome to HMMER... configuring for your system."

AC_SUBST(MDEFS)
AC_SUBST(PVMLIBDIR)
AC_SUBST(PVMINCDIR)
AC_SUBST(PVMFLAG)
AC_SUBST(PVMPROGS)
AC_SUBST(PVMLIBS)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_LN_S
AC_PROG_RANLIB

dnl GNU make check; makefile dependency lines for executables.
dnl original from John Darrington <j.darrington@elvis.murdoch.edu.au> 
dnl w/ heavy modifications from me.
dnl We need this because GNU make and SYSV make use different systems
dnl specifying variables for dependencies: $$@ in sysv, %: %.o in GNU.
dnl Would love to hear a better way of doing this.
dnl 
dnl I use different conventions in my Makefiles. Sometimes 
dnl executable "foo" has a file "foo.c" - this is the HMMER convention.
dnl Sometimes executable "foo" has a file "foo_main.c" - this is
dnl the SQUID convention. The configure script must set the
dnl EXEC_DEPENDENCY appropriately.
dnl
AC_DEFUN(CHECK_GNU_MAKE,[ 
  AC_MSG_CHECKING(whether your make is GNU make)
  foundGNUmake='nope, assuming sysv make.' ;
  EXEC_DEPENDENCY=[\$\$\@.o] ;
  if ( make --version nothing 2> /dev/null | grep GNU > /dev/null ) ;  then
     foundGNUmake='yes, it is.' ;
     EXEC_DEPENDENCY='%: %.o' ;
  fi
  AC_MSG_RESULT($foundGNUmake)
  AC_SUBST(EXEC_DEPENDENCY)
])
CHECK_GNU_MAKE

dnl Configure PVM
dnl
AC_ARG_WITH(pvm, 
[  --with-pvm         enable PVM, Parallel Virtual Machine],
[case $with_pvm in
   yes)  echo 'Configuring for PVM'
 	 PVMLIBDIR="-L${PVM_ROOT}/lib/${PVM_ARCH}"
	 PVMINCDIR="-I${PVM_ROOT}/include"
	 PVMFLAG="-DHMMER_PVM"
	 PVMPROGS="hmmcalibrate-pvm hmmpfam-pvm hmmsearch-pvm"
	 PVMLIBS="-lpvm3"
	 ;;
   no)   ;;
   *)    echo "Ignoring unknown argument to --with-pvm: $with_pvm"
	 ;;
esac])

dnl Enable threads
dnl Uses ACX_PTHREAD macro - see end of file.
dnl ****************************************************************
dnl ****************************************************************
dnl 
dnl The ACX_PTHREAD macro.
dnl Synopsis: ACX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]]) 
dnl Authors:  Steven G. Johnson <stevenj@alum.mit.edu>
dnl           Alejandro Forero Cuervo <bachue@bachue.com>
dnl Version:  1.4 (2001/03/16)
dnl Source:   http://www.gnu.org/software/ac-archive/Installed_Packages/acx_pthread.html
dnl
AC_DEFUN([ACX_PTHREAD], [
AC_REQUIRE([AC_CANONICAL_HOST])
acx_pthread_ok=no

# First, check if the POSIX threads header, pthread.h, is available.
# If it isn't, don't bother looking for the threads libraries.
AC_CHECK_HEADER(pthread.h, , acx_pthread_ok=noheader)

# We must check for the threads library under a number of different
# names; the ordering is very important because some systems
# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
# libraries is broken (non-POSIX).

# First of all, check if the user has set any of the PTHREAD_LIBS,
# etcetera environment variables, and if threads linking works using
# them:
if test x"$PTHREAD_LIBS$PTHREAD_CFLAGS" != x; then
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])
        AC_TRY_LINK_FUNC(pthread_join, acx_pthread_ok=yes)
        AC_MSG_RESULT($acx_pthread_ok)
        if test x"$acx_pthread_ok" = xno; then
       PTHREAD_LIBS=""
       PTHREAD_CFLAGS=""
        fi
        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"
fi

# Create a list of thread flags to try.  Items starting with a "-" are
# C compiler flags, and other items are library names, except for "none"
# which indicates that we try without any flags at all.

acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt"

# The ordering *is* (sometimes) important.  Some notes on the
# individual items follow:

# pthreads: AIX (must check this before -lpthread)
# none: in case threads are in libc; should be tried before -Kthread and
#       other compiler flags to prevent continual compiler warnings
# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
# -pthreads: Solaris/gcc
# -mthreads: Mingw32/gcc, Lynx/gcc
# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
#      doesn't hurt to check since this sometimes defines pthreads too;
#      also defines -D_REENTRANT)
# pthread: Linux, etcetera
# --thread-safe: KAI C++

case "${host_cpu}-${host_os}" in
        *solaris*)

        # On Solaris (at least, for some versions), libc contains stubbed
        # (non-functional) versions of the pthreads routines, so link-based
        # tests will erroneously succeed.  (We need to link with -pthread or
        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
        # a function called by this macro, so we could check for that, but
        # who knows whether they'll stub that too in a future libc.)  So,
        # we'll just look for -pthreads and -lpthread first:

        acx_pthread_flags="-pthread -pthreads pthread -mt $acx_pthread_flags"
        ;;
esac

if test x"$acx_pthread_ok" = xno; then
for flag in $acx_pthread_flags; do

        case $flag in
       none)
       AC_MSG_CHECKING([whether pthreads work without any flags])
       ;;

       -*)
       AC_MSG_CHECKING([whether pthreads work with $flag])
       PTHREAD_CFLAGS="$flag"
       ;;

       *)
       AC_MSG_CHECKING([for the pthreads library -l$flag])
       PTHREAD_LIBS="-l$flag"
       ;;
        esac

        save_LIBS="$LIBS"
        save_CFLAGS="$CFLAGS"
        LIBS="$PTHREAD_LIBS $LIBS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Check for various functions.  We must include pthread.h,
        # since some functions may be macros.  (On the Sequent, we
        # need a special flag -Kthread to make this header compile.)
        # We check for pthread_join because it is in -lpthread on IRIX
        # while pthread_create is in libc.  We check for pthread_attr_init
        # due to DEC craziness with -lpthreads.  We check for
        # pthread_cleanup_push because it is one of the few pthread
        # functions on Solaris that doesn't have a non-functional libc stub.
        # We try pthread_create on general principles.
        AC_TRY_LINK([#include <pthread.h>],
  [pthread_t th; pthread_join(th, 0);
   pthread_attr_init(0); pthread_cleanup_push(0, 0);
   pthread_create(0,0,0,0); pthread_cleanup_pop(0); ],
  [acx_pthread_ok=yes])

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        AC_MSG_RESULT($acx_pthread_ok)
        if test "x$acx_pthread_ok" = xyes; then
       break;
        fi

        PTHREAD_LIBS=""
        PTHREAD_CFLAGS=""
done
fi

# Various other checks:
if test "x$acx_pthread_ok" = xyes; then
        save_LIBS="$LIBS"
        LIBS="$PTHREAD_LIBS $LIBS"
        save_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"

        # Detect AIX lossage: threads are created detached by default
        # and the JOINABLE attribute has a nonstandard name (UNDETACHED).
        AC_MSG_CHECKING([for joinable pthread attribute])
        AC_TRY_LINK([#include <pthread.h>],
  [int attr=PTHREAD_CREATE_JOINABLE;],
  ok=PTHREAD_CREATE_JOINABLE, ok=unknown)
        if test x"$ok" = xunknown; then
       AC_TRY_LINK([#include <pthread.h>],
 [int attr=PTHREAD_CREATE_UNDETACHED;],
 ok=PTHREAD_CREATE_UNDETACHED, ok=unknown)
        fi
        if test x"$ok" != xPTHREAD_CREATE_JOINABLE; then
       AC_DEFINE(PTHREAD_CREATE_JOINABLE, $ok,
        [Define to the necessary symbol if this constant
uses a non-standard name on your system.])
        fi
        AC_MSG_RESULT(${ok})
        if test x"$ok" = xunknown; then
       AC_MSG_WARN([we do not know how to create joinable pthreads])
        fi

        AC_MSG_CHECKING([if more special flags are required for pthreads])
        flag=no
        case "${host_cpu}-${host_os}" in
       *-aix* | *-freebsd*)     flag="-D_THREAD_SAFE";;
       *solaris* | alpha*-osf*) flag="-D_REENTRANT";;
        esac
        AC_MSG_RESULT(${flag})
        if test "x$flag" != xno; then
       PTHREAD_CFLAGS="$flag $PTHREAD_CFLAGS"
        fi

        LIBS="$save_LIBS"
        CFLAGS="$save_CFLAGS"

        # More AIX lossage: must compile with cc_r
        AC_CHECK_PROG(PTHREAD_CC, cc_r, cc_r, ${CC})
else
        PTHREAD_CC="$CC"
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_CC)

# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
if test x"$acx_pthread_ok" = xyes; then
        ifelse([$1],,AC_DEFINE(HAVE_PTHREAD,1,[Define if you have POSIX threads libraries and header files.]),[$1])
        :
else
        acx_pthread_ok=no
        $2
fi

])dnl ACX_PTHREAD
dnl ****************************************************************
dnl ****************************************************************
dnl
dnl Back to my code...
dnl
AC_ARG_ENABLE(threads, 
[  --disable-threads  disable POSIX threads support],
[case $enable_threads in 
   yes) echo "Enabling POSIX threads support"
	ACX_PTHREAD([MDEFS="${MDEFS} -DHMMER_THREADS"])
	;;
   no)  echo "POSIX threads support disabled"
        ;;
   *)   echo "Ignoring unknown argument to --disable-threads: $enable_threads"
	;;
esac],
[
   echo "   Trying to enable default POSIX threads support"
   ACX_PTHREAD([MDEFS="${MDEFS} -DHMMER_THREADS"])
])


dnl Check for functions
AC_CHECK_FUNCS(pthread_setconcurrency)
AC_CHECK_FUNCS(pthread_attr_setscope)

dnl Although we configure our fixed-size integers in squid,
dnl we do need some of that configuration code here, because
dnl we might (on Solaris, for instance) need to include
dnl -lsocket to the linker to get ntohs() and friends.
dnl
AC_CHECK_FUNCS(ntohs, , AC_CHECK_LIB(socket, ntohs))
AC_CHECK_FUNCS(ntohl, , AC_CHECK_LIB(socket, ntohl))
AC_CHECK_FUNCS(htons, , AC_CHECK_LIB(socket, htons))
AC_CHECK_FUNCS(htonl, , AC_CHECK_LIB(socket, htonl))

dnl Configure the squid library
dnl
AC_CONFIG_SUBDIRS(squid)

dnl Write out Makefiles
dnl
echo "   Configuration complete. Writing Makefiles and such..."
AC_OUTPUT(Makefile src/Makefile testsuite/Makefile)

