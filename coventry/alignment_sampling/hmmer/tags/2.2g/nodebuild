#! /usr/local/bin/perl

# nodebuild
# Build a binary distribution on a node of the compile farm.
# Usage:
#    ssh <node> nodebuild <remote dir> <pkg> <platform> <configopts> <makeopts>
#
# Looks for source code in <node>:<remote dir>/<pkg>.tar.gz
# Creates binary dist in <node>:<remote dir>/<pkg>.bin.<platform>.tar.gz
#
# configure options and make options are separated by ',' not whitespace.
# double quotes in make options can be forced by a + sign.
#
# Example: 
# building a package "hmmer-2.2g" for platform "intel-linux" on host "wrasse"
# in remote directory "/tmp":
#    scp nodebuild wrasse:/tmp/
#    scp hmmer-2.2g.tar.gz wrasse:/tmp/
#    ssh wrasse /tmp/nodebuild /tmp hmmer-2.2g intel-linux --with-pvm CC=gcc;CFLAGS=+-O2 -Wall+
#    ssh wrasse rm /tmp/nodebuild
#    scp wrasse:/tmp/hmmer-2.2g.bin.intel-linux.tar.gz .
#    ssh wrasse rm /tmp/hmmer-2.2g.bin.intel-linux.tar.gz
#
#
# SRE, Sat Aug  4 11:29:53 2001, xref STL5 p.27
# CVS $Id$

$arena      = shift;
$pkg        = shift;
$platform   = shift;
$configopts = shift;
$makeopts   = shift;

$binpkg  = "$pkg.bin.$platform";

print "pkg        = $pkg\n";
print "arena      = $arena\n";
print "platform   = $platform\n";
print "configopts = $configopts\n";
print "makeopts   = $makeopts\n";

if ($configopts eq "none") { $configopts = ""; }
if ($makeopts   eq "none") { $makeopts =   ""; }

$configopts =~ s/,/ /g;
$makeopts   =~ s/,/ /g;

print "chdir...       \t";
chdir $arena ||  die "chdir failed";
print "[done]\n";

print "Cleaning arena...\t";
if (-e $binpkg) {
   system "rm -rf $binpkg";
   if ($? != 0) { die "rm -rf failed"; }
}
if (-e $binpkg.tar.gz) {
    system "rm -f $binpkg.tar.gz";
    if ($? != 0) { die "rm -f failed"; }
}
print "[done]\n";

print "Uncompressing...\t";
system "gunzip -c $pkg.tar.gz | tar xf -";
if ($? != 0) { die "gunzip | tar xf of $1.tar.gz failed";}
print "[done]\n";

print "Renaming...    \t";
rename $pkg, $binpkg || die "rename failed";
print "[done]\n";

print "chdir...       \t";
chdir $binpkg ||  die "chdir failed";
print "[done]\n";

print "configure...   \t";
system "./configure $configopts";
if ($? != 0) { die "configure failed"; }
print "[done]\n";

print "make $makeopts...  \t";
system "make $makeopts";
if ($? != 0) { die "make failed"; }
print "[done]\n";

print "make check...  \t";
system "make check $makeopts";
if ($? != 0) { die "make check failed"; }
print "[done]\n";

print "make clean...  \t";
system "make clean";
if ($? != 0) { die "make clean failed"; }
print "[done]\n";

print "chdir...       \t";
chdir ".." || die "chdir .. failed";
print "[done]\n";

print "tar...        \t";
system "tar cf $binpkg.tar $binpkg";
if ($? != 0) { die "tar failed"; }
print "[done]\n";

print "gzip...       \t";
system "gzip $binpkg.tar";
if ($? != 0) { die "gzip failed"; }
print "[done]\n";

print "cleaning up...\t";
system "rm -rf $binpkg";
if ($? != 0) { die "rm -rf failed"; }
system "rm -f $pkg.tar.gz";
if ($? != 0) { die "rm -f failed"; }
print "[done]\n";

exit 0;
