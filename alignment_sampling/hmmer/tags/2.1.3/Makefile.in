##########
# @LICENSE@
###########
# 
# Makefile for HMMER: Main project directory: installation, documentation
# RCS $Id$

# On must Unices, you can build the package without modifying anything 
#   by just typing "./configure; make".
#
# You may want to modify the following make variables:
#   BINDIR  - where the executables will be installed by a 'make install'
#   MANDIR  - where the man pages will be installed by a 'make install'
#   CC      - which compiler to use
#   CFLAGS  - compiler flags to use

# where you want things installed
# Sort of uses GNU coding standards. ${prefix} might be /usr/local.
# ${exec_prefix} gives you some flexibility for installing architecture
# dependent files (e.g. the programs): an example ${exec_prefix} might be
# /nfs/share/irix64/
#
prefix      = @prefix@
exec_prefix = @exec_prefix@
BINDIR      = @bindir@
MANDIR      = @mandir@

# how to install the man pages; 
# cp is generally fine, unless you preformat your pages.
#
INSTMAN   = cp
MANSUFFIX = 1

# your compiler and compiler flags
#
CC     = @CC@
CFLAGS = @CFLAGS@

# If you want more speed, here's the current recommendations
# for CFLAGS.
#
# IRIX 6.x, MIPSpro 7.2.1 compilers, where ipxx is your CPU type 
# CFLAGS = -Ofast=ipxx 
#
# Linux/Intel PentiumII, egcs 1.0.3 C compiler:
# CFLAGS = -O6 -fomit-frame-pointer -funroll-all-loops
#

#######
## HMMER installers should not need to modify below this line
## Much of it is concerned with maintenance of the development version
## and building the release (indeed, several commands will only work in 
## St. Louis)
#######
RELEASE     = 2.1.2
RELEASEDATE = "May 1999"
RELCODE     = "rel2_1_2"
LICENSE     = gnu

SHELL       = /bin/sh
SQUIDSRCDIR = $(HOME)/src/squid
COMPRESS    = compress
FTPDIR      = /nfs/ftp/eddy/hmmer/

PROGS = hmmalign hmmbuild hmmcalibrate hmmconvert hmmemit\
	hmmfetch hmmindex hmmpfam hmmsearch

SQUIDPROGS = alistat sfetch seqstat sreformat

PVMPROGS = @PVMPROGS@

READMES = 00README INSTALL 

HDRS =  config.h funcs.h globals.h structs.h version.h

SRC =   hmmalign.c    hmmbuild.c        hmmcalibrate.c    hmmconvert.c\
	hmmemit.c     hmmfetch.c        hmmindex.c        hmmpfam.c\
	hmmsearch.c\
	hmmcalibrate-pvm.c hmmpfam-pvm.c hmmsearch-pvm.c\
	alphabet.c    core_algorithms.c debug.c           emit.c\
	emulation.c   histogram.c       hmmio.c           mathsupport.c\
        masks.c       misc.c            modelmakers.c     plan7.c\
	plan9.c       prior.c           pvm.c		  threads.c\
	tophits.c     trace.c 

SQUIDSRC = alistat_main.c sfetch_main.c seqstat_main.c sreformat_main.c\
	   aligneval.c  alignio.c   cluster.c   dayhoff.c\
	   file.c       getopt.c    gsi.c       hsregex.c   interleaved.c\
	   iupac.c      msf.c       revcomp.c   selex.c\
	   sqerror.c    sqio.c      sre_ctype.c sre_math.c\
	   sre_string.c stack.c     translate.c types.c\
           weight.c

SQUIDHDRS = gnuregex.h squid.h sqfuncs.h 

SHIVADIST = README\
	    alignalign_test.c  evd_test.c   masks_test.c  parsingviterbi_test.c\
	    tophits_test.c     trace_test.c viterbi_exercise.c\
	    weeviterbi_test.c\
	    Optiontests.pl   Optiontests.fa  Optiontests.nfa Optiontests.nslx\
	    Optiontests.pam  Optiontests.slx\
	    fn3.hmm fn3.seed titin.fa\
	    trace_test.hmm trace_test.seq trace_test.slx \
	    weeviterbi_test.hmm weeviterbi_test.seq\
	    Exercises.sh fn3-bin fn3-bin-swap

DEMOS = globins50.msf  globins630.fa Artemia.fa\
	rrm.slx pkinase.slx fn3.slx\
	rrm.hmm\
	RU1A_HUMAN 7LES_DROME\
	amino.null nucleic.null amino.pri nucleic.pri

# all: compiles the src package, if we don't have precompiled binaries,
#      and moves them into binaries/ subdirectory.
#
all:
	@if test -d binaries; then\
	   echo "You have a precompiled HMMER distribution. No need to make.";\
	else\
	   (cd src; make CC="$(CC)" CFLAGS="$(CFLAGS)");\
	   mkdir binaries;\
	   for prog in $(PROGS) $(SQUIDPROGS) $(PVMPROGS); do\
	      mv src/$$prog binaries/;\
	   done;\
	fi

# check: compiles and runs test suite in Shiva/
#       These are public tests, distributed with the package.
#
check:	
	(cd src; make CC="$(CC)" CFLAGS="$(CFLAGS)" libhmmer.a)
	(cd Shiva; make CC="$(CC)" CFLAGS="$(CFLAGS)")
	(cd Shiva; make shiva)

# install: installs the binaries in BINDIR/
#          installs man pages in MANDIR/man1/  (if MANSUFFIX is 1)
install: 
	for file in $(PROGS) $(SQUIDPROGS) $(PVMPROGS); do\
	   cp binaries/$$file $(BINDIR)/;\
	done
	for file in hmmer $(PROGS) $(SQUIDPROGS); do\
	   $(INSTMAN) Man/$$file.man $(MANDIR)/man$(MANSUFFIX)/$$file.$(MANSUFFIX);\
	done

# "make clean" removes everything but the distribution 
#
clean:
	-rm -rf binaries
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
	-rm config.cache config.log config.status
	(cd Shiva; make clean)
	(cd src; make clean)
	-rm Makefile src/Makefile

# "make almostclean" leaves the binaries, for instance,
#    if we want to make a binary distribution
#
almostclean:
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out
	-rm config.cache config.log config.status
	(cd Shiva; make clean)
	(cd src; make clean)
	-rm Makefile src/Makefile

# verify: consistency checks on the package
#         These are private tests, not distributed with HMMER
verify:
	@echo Checking that RCS checkins are complete...
	@echo
	@for file in $(READMES) Makefile.in; do\
	   if test -w $$file; then echo "Toplevel $$file not checked in"; fi;\
	done;
	@for file in $(SRC) $(HDRS) Makefile.in; do\
	   if test -w src/$$file; then echo "src/$$file not checked in"; fi;\
	done;
	@for file in $(SQUIDSRC) $(SQUIDHDRS); do\
	   if test -w $(SQUIDSRCDIR)/$$file; then echo "SQUID $$file not checked in"; fi;\
	done;
	@for file in $(DEMOS); do\
	   if test -w Demos/$$file; then echo "Demos/$$file not checked in"; fi;\
	done;
	@for file in $(PROGS); do\
	   if test -w Man/$$file.man; then echo "Man/$$file not checked in"; fi;\
	done;
	@for file in $(SQUIDPROGS); do\
	   if test -w $(SQUIDSRCDIR)/Man/$$file.man; then echo "SQUID Man/$$file not checked in"; fi;\
	done;
	@for file in $(SHIVADIST) Makefile.in; do\
	   if test -w Shiva/$$file; then echo "Shiva/$$file not checked in"; fi;\
	done;
	@echo
	@echo Checking options for consistency and documentation...
	@for prog in $(PROGS) $(SQUIDPROGS); do\
	   ./checkoptions.pl $$prog;\
	done


# doc:  build the Userguide and on-line manual
#
doc:
	(cd Userguide; make)

# squid: update files from squid library.
#
squid:
	for file in $(SQUIDHDRS); do\
	   co $(HOME)/src/squid/RCS/$$file,v src/$$file;\
	done
	for file in $(SQUIDSRC); do\
	   co ${SQUIDSRCDIR}/RCS/$$file,v src/$$file;\
	done
	for file in $(SQUIDPROGS); do\
	   co ${SQUIDSRCDIR}/Man/RCS/$$file.man,v Man/$$file.man;\
	done

# dist: build a new distribution directory in build/hmmer-$RELEASE
#       checks out RCS files read-only
#       tags RCS files with $(RELCODE) for later reconstruction
#       squid RCS files are tagged with hmmer$(RELCODE).
#       Adds a license statement to each file that has a @LICENSE@ line.
#       
#       Thou mayest not use files other than RCS files for a build.
#       (Else reconstruction may not work).
#
dist:
	#
	# Create directory structure for build
	#
	@if test -d build/hmmer-$(RELEASE); then rm -rf build/hmmer-$(RELEASE); fi
	@if test -d build/hmmer-$(RELEASE).tar; then rm -f build/hmmer-$(RELEASE).tar; fi
	@if test -d build/hmmer-$(RELEASE).tar.Z; then rm -f build/hmmer-$(RELEASE).tar.Z; fi
	@if test -d build/hmmer-$(RELEASE).tar.gz; then rm -f build/hmmer-$(RELEASE).tar.gz; fi
	mkdir build/hmmer-$(RELEASE)
	mkdir build/hmmer-$(RELEASE)/src
	mkdir build/hmmer-$(RELEASE)/Demos
	mkdir build/hmmer-$(RELEASE)/Man
	mkdir build/hmmer-$(RELEASE)/Shiva
	mkdir build/hmmer-$(RELEASE)/Userguide
	# 
	# Make the configure script; copy it and other GNU config material to distribution
	#
	autoconf
	cp configure    build/hmmer-$(RELEASE)/
	cp config.guess build/hmmer-$(RELEASE)/
	cp config.sub   build/hmmer-$(RELEASE)/
	cp install-sh   build/hmmer-$(RELEASE)/
	# 
	# Attach the license and release notes
	#
	cp Licenses/LICENSE.$(LICENSE)     build/hmmer-$(RELEASE)/LICENSE
	cp Licenses/COPYING.$(LICENSE)     build/hmmer-$(RELEASE)/COPYING
	cp ReleaseNotes/RELEASE-$(RELEASE) build/hmmer-$(RELEASE)/NOTES
	#
	# RCS extraction of top level README-type documentation and Makefile
	#
	for file in $(READMES) Makefile.in; do\
	  rcs -N$(RELCODE): RCS/$$file,v;\
	  co RCS/$$file,v build/hmmer-$(RELEASE)/$$file;\
	  licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/$$file;\
        done
	#
	# RCS extraction of src/ source code subdirectory
	#
	for file in $(SRC) $(HDRS) Makefile.in; do\
           rcs -N$(RELCODE): src/RCS/$$file,v;\
	   co src/RCS/$$file,v build/hmmer-$(RELEASE)/src/$$file;\
	   licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/src/$$file;\
	done
	for file in $(SQUIDSRC) $(SQUIDHDRS); do\
	   rcs -Nhmmer_$(RELCODE): $(SQUIDSRCDIR)/RCS/$$file,v;\
	   co $(SQUIDSRCDIR)/RCS/$$file,v build/hmmer-$(RELEASE)/src/$$file;\
	   licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/src/$$file;\
	done
	#
	# RCS extraction of Demos/ 
	#
	for file in $(DEMOS); do\
	  rcs -N$(RELCODE): Demos/RCS/$$file,v;\
	  co Demos/RCS/$$file,v build/hmmer-$(RELEASE)/Demos/$$file;\
	  licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/Demos/$$file;\
        done
	#
	# RCS extraction of HMMER Man/ manual pages
	#
	for file in $(PROGS) hmmer; do\
	   rcs -N$(RELCODE): Man/RCS/$$file.man,v;\
	   co -p Man/RCS/$$file.man,v | sed -e 's/@RELEASE@/${RELEASE}/g' \
                                            -e 's/@RELEASEDATE@/${RELEASEDATE}/g' \
	                                    -e 's/@SEEALSO@/${PROGS}/g'\
                > build/hmmer-$(RELEASE)/Man/$$file.man;\
	   licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/Man/$$file.man;\
	done
	#
	# RCS extraction of SQUID Man/ manual pages
	#
	for file in $(SQUIDPROGS); do\
	   rcs -Nhmmer_$(RELCODE): ${SQUIDSRCDIR}/Man/RCS/$$file.man,v;\
	   co -p ${SQUIDSRCDIR}/Man/RCS/$$file.man,v |\
               sed -e 's/@RELEASE@/${RELEASE}/g' \
                   -e 's/@RELEASEDATE@/${RELEASEDATE}/g' \
                   -e 's/@PACKAGE@/HMMER/g' \
	           -e 's/@SEEALSO@/${SQUIDPROGS}/g'\
                > build/hmmer-$(RELEASE)/Man/$$file.man;\
	   licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/Man/$$file.man;\
	done
	#
	# RCS extraction of Shiva/ testsuite
	#
	for file in $(SHIVADIST) Makefile.in; do\
	   rcs -N$(RELCODE): Shiva/RCS/$$file,v;\
	   co Shiva/RCS/$$file,v build/hmmer-$(RELEASE)/Shiva/$$file;\
	   licenseadd.pl Licenses/$(LICENSE) build/hmmer-$(RELEASE)/Shiva/$$file;\
	done
	# 
	# Compilation of documentation: includes hmmer-html.tar.Z and Userguide.ps
	# Documentation not provided in source form.
	#
	(cd Userguide; make clean)
	(cd Userguide; make)
	cp -f Userguide/Userguide.ps      build/hmmer-$(RELEASE)/Userguide/
	cp -f Userguide/Userguide.pdf     build/hmmer-$(RELEASE)/Userguide/
	cp -f Userguide/hmmer-html.tar.Z  build/hmmer-$(RELEASE)/Userguide/
#
# Packaging commands
#
	(cd build; tar cvf hmmer-$(RELEASE).tar hmmer-$(RELEASE))
	$(COMPRESS) -f build/hmmer-$(RELEASE).tar


# make ftpdist: install FTP distribution. Assumes a "make dist"
#               has already succeeded. Doesn't do the symlink;
#               doesn't install the on-line manual for the Web site.
#
ftpdist:
	cp -f $(READMES)                     $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/COPYING $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/LICENSE $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)/NOTES   $(FTPDIR)
	cp -f build/hmmer-$(RELEASE).tar.Z   $(FTPDIR)
	cp -f build/hmmer-$(RELEASE)-*.tar.Z $(FTPDIR)
	cp -f Userguide/Userguide.ps         $(FTPDIR)
	cp -f Userguide/Userguide.pdf        $(FTPDIR)
	cp -f Userguide/hmmer-html.tar.Z     $(FTPDIR)


# make stable: Set up the FTP site symlink to the current stable HMMER release.
#
stable:
	ln -sf $(FTPDIR)/hmmer-$(RELEASE).tar.Z $(FTPDIR)/hmmer.tar.Z


