# All Makefile.in's in src/ subdirs include the identical
# block of makefile code below...
SHELL         = /bin/sh

prefix        = @prefix@
exec_prefix   = @exec_prefix@
datarootdir   = @datarootdir@
bindir        = @bindir@
libdir        = @libdir@
includedir    = @includedir@

CC            = @CC@
CFLAGS        = @CFLAGS@ @PTHREAD_CFLAGS@
SSE4_CFLAGS   = @SSE4_CFLAGS@
AVX_CFLAGS    = @AVX_CFLAGS@
AVX512_CFLAGS = @AVX512_CFLAGS@
NEON_CFLAGS   = @NEON_CFLAGS@
VMX_CFLAGS    = @VMX_CFLAGS@	
PIC_CFLAGS     = @PIC_CFLAGS@
CPPFLAGS      = @CPPFLAGS@
LDFLAGS       = @LDFLAGS@
DEFS          = @DEFS@
LIBS          = ${LIBTMP} -lhmmer -leasel -ldivsufsort @LIBS@ -lm

AR            = @AR@ 
RANLIB        = @RANLIB@
INSTALL       = @INSTALL@

# in MYINCDIRs, we have build dirs first, because headers generated by
# ./configure (p7_config.h, esl_config.h) are in build dirs, not
# source dirs; and we want to find these first (in case an errant one is
# in the source tree). All other headers are in the source tree.
# 
ESLDIR       = @HMMER_ESLDIR@
SADIR        = @HMMER_SADIR@
MYLIBDIRS    = -L${top_builddir}/${ESLDIR}\
               -L${top_builddir}/${SADIR}\
               ${LIBTMPDIR} \
               -L${top_builddir}/src
MYINCDIRS    = -I${top_builddir}/${ESLDIR} \
               -I${top_builddir}/${SADIR} \
	       -I${top_builddir}/src \
	       -I${top_srcdir}/${ESLDIR} \
	       -I${top_srcdir}/${SADIR} \
	       -I${top_srcdir}/src
MYLIBDEPS    = ${LIBTMPDEP} ${top_builddir}/src/libhmmer.a ${top_builddir}/${ESLDIR}/libeasel.a ${top_builddir}/${SADIR}/libdivsufsort.a


# beautification magic stolen from git 
QUIET_SUBDIR0 = +${MAKE} -C #space separator after -c
QUIET_SUBDIR1 = 
ifndef V
	QUIET_CC      = @echo '    ' CC $@;
	QUIET_GEN     = @echo '    ' GEN $@;
	QUIET_AR      = @echo '    ' AR $@;
	QUIET_SUBDIR0 = +@subdir=
	QUIET_SUBDIR1 = ; echo '    ' SUBDIR $$subdir; \
		        ${MAKE} -C $$subdir
	QUIET         = @
endif

ALL_OBJS       = ${OBJS}       ${SSE_OBJS}       ${AVX_OBJS}       ${AVX512_OBJS}       ${NEON_OBJS}       ${VMX_OBJS}
ALL_UTESTS     = ${UTESTS}     ${SSE_UTESTS}     ${AVX_UTESTS}     ${AVX512_UTESTS}     ${NEON_UTESTS}     ${VMX_UTESTS}
ALL_STATS      = ${STATS}      ${SSE_STATS}      ${AVX_STATS}      ${AVX512_STATS}      ${NEON_STATS}      ${VMX_STATS}
ALL_BENCHMARKS = ${BENCHMARKS} ${SSE_BENCHMARKS} ${AVX_BENCHMARKS} ${AVX512_BENCHMARKS} ${NEON_BENCHMARKS} ${VMX_BENCHMARKS}
ALL_EXAMPLES   = ${EXAMPLES}   ${SSE_EXAMPLES}   ${AVX_EXAMPLES}   ${AVX512_EXAMPLES}   ${NEON_EXAMPLES}   ${VMX_EXAMPLES}

${SSE_OBJS}:          SIMD_CFLAGS:= $(SSE4_CFLAGS)     
${AVX_OBJS}:          SIMD_CFLAGS:= $(AVX_CFLAGS)     
${AVX512_OBJS}:       SIMD_CFLAGS:= $(AVX512_CFLAGS)  
${NEON_OBJS}:         SIMD_CFLAGS:= $(NEON_CFLAGS)    
${VMX_OBJS}:          SIMD_CFLAGS:= $(VMX_CFLAGS)     

${SSE_UTESTS}:        SIMD_CFLAGS:= $(SSE4_CFLAGS)     
${AVX_UTESTS}:        SIMD_CFLAGS:= $(AVX_CFLAGS)     
${AVX512_UTESTS}:     SIMD_CFLAGS:= $(AVX512_CFLAGS)  
${NEON_UTESTS}:       SIMD_CFLAGS:= $(NEON_CFLAGS)    
${VMX_UTESTS}:        SIMD_CFLAGS:= $(VMX_CFLAGS)     

${SSE_STATS}:         SIMD_CFLAGS:= $(SSE4_CFLAGS)     
${AVX_STATS}:         SIMD_CFLAGS:= $(AVX_CFLAGS)     
${AVX512_STATS}:      SIMD_CFLAGS:= $(AVX512_CFLAGS)  
${NEON_STATS}:        SIMD_CFLAGS:= $(NEON_CFLAGS)    
${VMX_STATS}:         SIMD_CFLAGS:= $(VMX_CFLAGS)     

${SSE_BENCHMARKS}:    SIMD_CFLAGS:= $(SSE4_CFLAGS)     
${AVX_BENCHMARKS}:    SIMD_CFLAGS:= $(AVX_CFLAGS)     
${AVX512_BENCHMARKS}: SIMD_CFLAGS:= $(AVX512_CFLAGS)  
${NEON_BENCHMARKS}:   SIMD_CFLAGS:= $(NEON_CFLAGS)    
${VMX_BENCHMARKS}:    SIMD_CFLAGS:= $(VMX_CFLAGS)     

${SSE_EXAMPLES}:      SIMD_CFLAGS:= $(SSE4_CFLAGS)     
${AVX_EXAMPLES}:      SIMD_CFLAGS:= $(AVX_CFLAGS)     
${AVX512_EXAMPLES}:   SIMD_CFLAGS:= $(AVX512_CFLAGS)  
${NEON_EXAMPLES}:     SIMD_CFLAGS:= $(NEON_CFLAGS)    
${VMX_EXAMPLES}:      SIMD_CFLAGS:= $(VMX_CFLAGS)     



.PHONY: all dev check tests install uninstall distclean clean tags-append
.FORCE:

all:   libhmmer-${MODULE}.stamp ${LIBTMPDEP} ${PROGS} ${MPIPROGS}
dev:   libhmmer-${MODULE}.stamp ${LIBTMPDEP} ${PROGS} ${MPIPROGS} ${UTESTS} ${STATS} ${BENCHMARKS} ${EXAMPLES}
check: libhmmer-${MODULE}.stamp ${LIBTMPDEP} ${PROGS} ${MPIPROGS} ${UTESTS}
tests: libhmmer-${MODULE}.stamp ${LIBTMPDEP} ${PROGS} ${MPIPROGS} ${UTESTS}

# In some subdirs, ${ALL_OBJS} may be empty. We can't give an empty arg string to 'ar'.
# Hence the ! -z shell test on ${ALL_OBJS} below.
libhmmer-${MODULE}.stamp: ${ALL_OBJS}
	${QUIET}+if [ ! -z "${ALL_OBJS}" ]; then \
	   echo '    ' AR $@ ;\
	   ${AR} -r ${top_builddir}/src/libhmmer.a $? > /dev/null 2>&1 ;\
	   ${RANLIB} ${top_builddir}/src/libhmmer.a ;\
	   echo ${MODULE} "objects compiled for libhmmer:\c" > $@ ;\
	   date >> $@ ;\
	else \
	   echo ${MODULE} "has no libhmmer objects\c" > $@ ;\
	fi


# The way we build unit tests, benchmarks, etc., our compile lines end
# up with 'cc -o foo_utest foo.c ${OBJS}' and ${OBJS} includes foo.o;
# compiler may barf on duplicate symbols in foo.c, foo.o. So, let the
# linker deal with the issue; linker should only seek for symbols
# that haven't already been defined. 
# When ${OBJS} is non-empty, the including Makefile also sets:
#    ${LIBTMP}    = -l./lib${MODULE}.a     prepended to ${LIBS}
#    ${LIBTMPDIR} = -L.                    added to ${MYLIBDIRS}
#    ${LIBTMPDEP} = lib${MODULE}.a         prepended to ${MYLIBDEPS}
lib${MODULE}.a: ${OBJS}
	${QUIET_AR}${AR} -r lib${MODULE}.a $? > /dev/null 2>&1 
	@${RANLIB} lib${MODULE}.a 

# "Object" code is included in libhmmer.a.
${ALL_OBJS}:  %.o : %.c ${HDRS} 
	${QUIET_CC}${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${PTHREAD_CFLAGS} ${CPPFLAGS} ${DEFS} ${MYINCDIRS} -c $<

# Programs build from their .c's directly. They are not included in libhmmer.a.
${PROGS}: % : %.c  libhmmer-${MODULE}.stamp ${MYLIBDEPS}
	${QUIET_GEN}${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${PTHREAD_CFLAGS} ${CPPFLAGS} ${DEFS} ${MYINCDIRS} ${LDFLAGS} ${MYLIBDIRS} -o $@ $< ${LIBS}

${ALL_UTESTS}: libhmmer-${MODULE}.stamp ${MYLIBDEPS}
	@BASENAME=`echo $@ | sed -e 's/_utest//'| sed -e 's/^p7_//'` ;\
	DFLAG=`echo $${BASENAME} | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`;\
	DFLAG=p7$${DFLAG}_TESTDRIVE ;\
	if test -e ${srcdir}/p7_$${BASENAME}.c; then \
           DFILE=${srcdir}/p7_$${BASENAME}.c ;\
        else \
           DFILE=${srcdir}/$${BASENAME}.c ;\
	fi;\
	if test ${V} ;\
	   then echo "${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}" ;\
	   else echo '    ' GEN $@ ;\
	fi ;\
	${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}

${ALL_STATS}: libhmmer-${MODULE}.stamp ${MYLIBDEPS}
	@BASENAME=`echo $@ | sed -e 's/_stats//' | sed -e 's/^p7_//'`;\
	DFLAG=`echo $${BASENAME} | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`;\
	DFLAG=p7$${DFLAG}_STATS ;\
	if test -e ${srcdir}/p7_$${BASENAME}.c; then \
           DFILE=${srcdir}/p7_$${BASENAME}.c ;\
        else \
           DFILE=${srcdir}/$${BASENAME}.c ;\
	fi;\
	if test ${V} ;\
	   then echo "${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}" ;\
	   else echo '    ' GEN $@ ;\
	fi ;\
	${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}

${ALL_BENCHMARKS}: libhmmer-${MODULE}.stamp  ${MYLIBDEPS}
	@BASENAME=`echo $@ | sed -e 's/_benchmark//' | sed -e 's/^p7_//'`;\
	DFLAG=`echo $${BASENAME} | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`;\
	DFLAG=p7$${DFLAG}_BENCHMARK ;\
	if test -e ${srcdir}/p7_$${BASENAME}.c; then \
           DFILE=${srcdir}/p7_$${BASENAME}.c ;\
        else \
           DFILE=${srcdir}/$${BASENAME}.c ;\
	fi;\
	if test ${V} ;\
	   then echo "${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}" ;\
	   else echo '    ' GEN $@ ;\
	fi ;\
	${CC} ${CFLAGS} ${PIC_CFLAGS} ${SIMD_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}

${ALL_EXAMPLES}: libhmmer-${MODULE}.stamp ${MYLIBDEPS}
	@BASENAME=`echo $@ | sed -e 's/_example[0-9]*//'| sed -e 's/^p7_//'` ;\
	DFLAG=`echo $${BASENAME} | sed -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`;\
	DFLAG=p7$${DFLAG}_EXAMPLE ;\
	if test -e ${srcdir}/p7_$${BASENAME}.c; then \
           DFILE=${srcdir}/p7_$${BASENAME}.c ;\
        else \
           DFILE=${srcdir}/$${BASENAME}.c ;\
	fi;\
	if test ${V} ;\
	   then echo "${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}" ;\
	   else echo '    ' GEN $@ ;\
	fi ;\
	${CC} ${CFLAGS} ${SIMD_CFLAGS} ${PIC_CFLAGS} ${CPPFLAGS} ${LDFLAGS} ${DEFS} ${MYLIBDIRS} ${MYINCDIRS} -D$${DFLAG} -o $@ $${DFILE} ${LIBS}

install:
	${QUIET}if [ ! -z "${PROGS}" ]; then \
	   for file in ${PROGS}; do \
	      echo '    ' INSTALL $$file ;\
	      ${INSTALL} -m 0755 $$file ${DESTDIR}${bindir}/ ;\
	   done ;\
	fi

uninstall:
	${QUIET}if [ ! -z "${PROGS}" ]; then \
	   for file in ${PROGS}; do \
	      echo '    ' UNINSTALL $$file ;\
	      rm -f ${DESTDIR}${bindir}/$$file ;\
	   done ;\
	fi

distclean: clean
	-rm -f Makefile 

clean:
	-rm -f libhmmer-${MODULE}.stamp lib${MODULE}.a ${PROGS} ${UTESTS} ${STATS} ${BENCHMARKS} ${EXAMPLES}
	-rm -f *.o *~ Makefile.bak core TAGS gmon.out cscope.out *.gcno *.gcda *.gcov
	${QUIET}for prog in ${PROGS} ${UTESTS} ${STATS} ${BENCHMARKS} ${EXAMPLES}; do \
	   if test -d $$prog.dSYM; then rm -rf $$prog.dSYM; fi ;\
	done

tags-append:
	etags -o ${top_srcdir}/TAGS -a ${srcdir}/*.c ${srcdir}/*.h ${srcdir}/*.in



