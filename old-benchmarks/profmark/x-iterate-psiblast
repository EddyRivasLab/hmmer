#! /usr/bin/perl -w

$n_iterations = 1;

$top_builddir  = shift;
$top_srcdir    = shift;
$wrkdir        = shift;
$tblfile       = shift;
$msafile       = shift;
$fafile        = shift;
$outfile       = shift;

$n_iterations +=1; # +1 because psi-blast stores checkpoint file from the PREVIOUS iteration.

$psiblast  = "${top_builddir}/bin/psiblast";
$opts1      = "-num_threads 1 -outfmt 6 -max_target_seqs 9999 -evalue 100 -seg yes -num_iterations $n_iterations";
$opts2      = "-num_threads 1 -outfmt 6 -max_target_seqs 9999 -evalue 100 -comp_based_stats 1";
# explanation of options
#   -num_threads 1        : run a single thread/cpu  (benchmark sends independent jobs to our cluster nodes, uses all cpus that way already)
#   -outfmt 6             : tabular output, for directly & simply parsing results, obviating need for our demotic parsers
#   -max_target_seqs 9999 : show a large hit list, deep into noise (benchmark calculates its own false positive threshold)
#                            (with outfmt 6, num_descriptions and num_alignments options don't work)
#   -seg yes              : filters query seq with SEG (doubt that this option has any effect on restored checkpoint file)
#   -num_iterations <n>   : number of rounds to iterate in the iteration stage, on the iteration db.  Minimum n=2, because the checkpoint file is for the *prev* round. (n=1 generates only a blastp output and no checkpoint)
#   -comp_based_stats 1   : suppresses a warning that PSSM search can't use default comp based stats and reverts to strategy 1.
#   -evalue 100           : to go deeper into noise
#
# also will add -query <query.fa> -db <database> ;
#   and -out_pssm <checkpoint file> for the iteration stage (not out_ascii_pssm; in_pssm can't read ascii)
#   and -in_pssm <checkpoint file> for the benchmark search.

if (! -d $top_builddir)  { die "didn't find BLAST build directory $top_builddir"; }
if (! -d $top_srcdir)    { die "didn't find H3 source directory $top_srcdir"; }
if (! -x $psiblast)      { die "didn't find executable $psiblast"; }
if (! -e $wrkdir)        { die "$wrkdir doesn't exist"; }

open(OUTFILE,">$outfile")   || die "failed to open $outfile";
open(TABLE, "$tblfile")     || die "failed to open $tblfile";
MSA:
while (<TABLE>)
{
    ($msaname) = split;

    # Get first sequence from benchmark query alignment.`
    $cmd  = qq!esl-afetch -o $wrkdir/$msaname.sto $msafile $msaname!;                                      $output = `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Fetch the query MSA from the benchmark; tmp .sto file here
    $cmd  = qq!esl-seqstat --amino -a $wrkdir/$msaname.sto | grep "^=" | awk '{print \$2}'!;               $output = `$cmd`;     if ($?) { print "FAILED: $cmd\n", next MSA; }   # Extract list of indiv seq names. --amino for robustness, some msa's v. small
    @qnames = split(/^/,$output); 
    chop (@qnames);
    $qname = $qnames[0];
    $cmd = qq!esl-sfetch -o $wrkdir/$msaname.query $wrkdir/$msaname.sto $qname > /dev/null!;                      `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Pick a single seq (first one) to tmp file; tmp .query file here

    $cmd  = qq!$psiblast $opts1 -db $fafile.iter -query $wrkdir/$msaname.query -out_pssm $wrkdir/$msaname.pssm!;  `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Iterate on the .iter database. tmp .pssm checkpoint file here.
    $cmd  = qq!$psiblast $opts2 -out $wrkdir/$msaname.out -db $fafile -in_pssm $wrkdir/$msaname.pssm!;            `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Search the benchmark database; creates .out file here

    # blast tabular output can report more than one hit and E-value
    # per target; we only want the best one. This is why we have a
    # 'sort' and a check against the %saw hash.
    if (! open(OUTPUT, "sort -g -k11 $wrkdir/$msaname.out |")) { print "FAILED: to open $wrkdir/$msaname.out"; next MSA; }
    %saw = ();
    while (<OUTPUT>)
    {
	if (/^\#/) { next; }
	@fields   = split(' ', $_);
	$target   = $fields[1];
	$pval     = $fields[10];
	$bitscore = $fields[11];
	if (! $saw{$target}) { 	printf OUTFILE "%g %.1f %s %s\n", $pval, $bitscore, $target, $msaname; }
	$saw{$target} = 1;
    }
    close OUTPUT;
    unlink "$wrkdir/$msaname.query";
    unlink "$wrkdir/$msaname.sto";
    unlink "$wrkdir/$msaname.pssm";
    unlink "$wrkdir/$msaname.out";
}
close TABLE;
close OUTFILE;
