#! /usr/bin/perl -w

BEGIN {
    $top_builddir  = shift;
    $top_srcdir    = shift;
    $wrkdir        = shift;
    $tblfile       = shift;
    $msafile       = shift;
    $fafile        = shift;
    $outfile       = shift;
}
use lib "${top_srcdir}/lib/easel/demotic";
use demotic_fasta;

$fasta      = "${top_builddir}/bin/ssearch36";
$opts       = "-q -E 200 -m 8";
# -q     = quiet (batch) mode
# -E 200 = report top hits deeper into noise, down to E=200 (default was 10)
# -m 8   = tabular output. E-value is field 11.

if (! -d $top_builddir)                                 { die "didn't find FASTA/SSEARCH build directory $top_builddir"; }
if (! -d $top_srcdir)                                   { die "didn't find H3 source directory $top_srcdir"; }
if (! -x $fasta)                                        { die "didn't find executable $fasta"; }
if (! -e $wrkdir)                                       { die "$wrkdir doesn't exist"; }

open(OUTFILE,">$outfile") || die "failed to open $outfile";
open(TABLE, "$tblfile")   || die "failed to open $tblfile";
MSA:
while (<TABLE>)
{
    ($msaname) = split;

    $cmd  = qq!esl-afetch -o $wrkdir/$msaname.sto $msafile $msaname!;                         $output = `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Fetch the query MSA from the benchmark; tmp .sto file here
    $cmd  = qq!esl-seqstat --amino -a $wrkdir/$msaname.sto | grep "^=" | awk '{print \$2}'!;  $output = `$cmd`;     if ($?) { print "FAILED: $cmd\n", next MSA; }   # Extract list of indiv seq names. --amino for robustness, some msa's v. small
    @qnames = split(/^/,$output); 
    chop (@qnames);
    $qname = $qnames[0];
    $cmd  = qq!esl-sfetch -o $wrkdir/$msaname.query $wrkdir/$msaname.sto $qname > /dev/null!;           `$cmd`;     if ($?) { print "FAILED: $cmd\n"; next MSA; }   # Pick a single seq (first one) to tmp file; tmp .query file here

    # search it against the benchmark db
    $cmd = qq!$fasta $opts $wrkdir/$msaname.query $fafile | sort -g -k11 |!;         if (! open(OUTPUT, "$cmd"))            { print "FAILED: $cmd\n", next MSA; }

    # sort and %saw are protecting us against multiple hits to same target in the tabular output.
    %saw = ();
    while (<OUTPUT>)
    {
	if (/^\#/) { next; }
	@fields   = split(' ', $_);
	$target   = $fields[1];
	$pval     = $fields[10];
	$bitscore = $fields[11];
	if (! $saw{$target}) { 	printf OUTFILE "%g %.1f %s %s\n", $pval, $bitscore, $target, $msaname; }
	$saw{$target} = 1;
    }
    close OUTPUT;

    unlink "$wrkdir/$msaname.query";
    unlink "$wrkdir/$msaname.sto";
}
close TABLE;
close OUTFILE;
